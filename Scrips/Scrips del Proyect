-- PROCEDIMIENTOS DE BORRADO
-- 1 Borrar AVISOS
create or replace PROCEDURE P_DELETE_AVISO(
P_FCABE AVISO.CP_FECHA%TYPE,
P_ID AVISO.CP_TRABAJADOR_ID_TRABAJADOR%TYPE)
AS
BEGIN
      DELETE FROM AVISO WHERE CP_FECHA = P_FCABE AND CP_TRABAJADOR_ID_TRABAJADOR = P_ID;
COMMIT;
END;

-- 2 Borrar CABECERAS DE PARTE
-- create or replace PROCEDURE P_DELETE_CABE_PARTE(
P_FECHA CP.FECHA%TYPE,
P_ID CP.TRABAJADOR_ID_TRABAJADOR%TYPE)
AS
BEGIN
      DELETE FROM CP WHERE FECHA = P_FECHA AND TRABAJADOR_ID_TRABAJADOR = P_ID;
COMMIT;
END;

-- Borra CENTRO_TRABAJO
create or replace PROCEDURE        P_DELETE_CT(
P_CT_ID CENTRO_TRABAJO.ID_CENTRO%TYPE)
AS
BEGIN
      DELETE FROM CENTRO_TRABAJO WHERE ID_CENTRO=p_CT_ID;
COMMIT;
END;

-- 3 Borrar GESTION DE PARTES
create or replace PROCEDURE P_DELETE_GESTION_PARTE(
P_FECHA CP.FECHA%TYPE,
P_MATRICULA CP.VEHICULO_MATRICULA%TYPE,
P_ID CP.TRABAJADOR_ID_TRABAJADOR%TYPE)
AS
BEGIN
      DELETE FROM CP WHERE FECHA = P_FECHA AND TRABAJADOR_ID_TRABAJADOR = P_ID AND VEHICULO_MATRICULA = P_MATRICULA;
COMMIT;
END;

-- Borrar LINEAS DE PARTES
create or replace PROCEDURE P_DELETE_LINEA_PARTE(
P_FECHA LP.CP_FECHA%TYPE,
P_ID LP.CP_TRABAJADOR_ID_TRABAJADOR%TYPE)
AS
BEGIN
      DELETE FROM LP WHERE CP_FECHA = P_FECHA AND CP_TRABAJADOR_ID_TRABAJADOR = P_ID;
COMMIT;
END;

-- Borrar TRABAJADOR
create or replace PROCEDURE P_DELETE_TRABAJADOR(
P_T_ID TRABAJADOR.ID_TRABAJADOR%TYPE)
AS
BEGIN
      DELETE FROM TRABAJADOR WHERE ID_TRABAJADOR = P_T_ID;
COMMIT;
END;

-- Borrar VEHICULO
create or replace PROCEDURE P_DELETE_Vehiculo(
P_V_MATRICULA VEHICULO.MATRICULA%TYPE)
AS
BEGIN
      DELETE FROM VEHICULO WHERE MATRICULA=P_V_MATRICULA;
COMMIT;
END;

-- PROCEDIMIENTOS DE EDICION Y DE INSERCION
create or replace PROCEDURE P_IN_EDIT_AVISO(
P_FAVISO AVISO.FECHA_AVISO%TYPE,
P_TEXTO AVISO.TEXTO%TYPE,
P_ID AVISO.TRABAJADOR_ID_TRABAJADOR%TYPE,
P_FPARTE AVISO.CP_FECHA%TYPE,
P_IDCP AVISO.CP_TRABAJADOR_ID_TRABAJADOR%TYPE)
AS
BEGIN
      UPDATE AVISO
      SET
            FECHA_AVISO = P_FAVISO,
            TEXTO = P_TEXTO,
            TRABAJADOR_ID_TRABAJADOR = P_ID,
            CP_FECHA = P_FPARTE,
            CP_TRABAJADOR_ID_TRABAJADOR = P_IDCP

      where CP_FECHA = P_FPARTE AND CP_TRABAJADOR_ID_TRABAJADOR = P_IDCP;
IF sql%notfound
THEN
INSERT INTO AVISO(FECHA_AVISO, TEXTO, TRABAJADOR_ID_TRABAJADOR, CP_FECHA, CP_TRABAJADOR_ID_TRABAJADOR)
VALUES (P_FAVISO, P_TEXTO, P_ID, P_FPARTE, P_IDCP);
END IF;
COMMIT;
END;

create or replace PROCEDURE  P_IN_EDIT_CABE_PARTE(
P_FECHA CP.FECHA%TYPE,
P_KMI CP.KM_INICIO%TYPE,
P_KMF CP.KM_FINAL%TYPE,
P_GASOIL CP.GASTO_GASOIL%TYPE,
P_AUTO CP.GASTO_AUTOPISTA%TYPE,
P_DIETAS CP.GASTO_DIETAS%TYPE,
P_OTROS CP.OTROS_GASTOS%TYPE,
P_INCI CP.INCIDENCIAS_POSIBLES%TYPE,
P_EH CP.EXCESO_HORAS%TYPE,
P_CERRAR CP.CERRAR_LOGIS%TYPE,
P_VERIFICA CP."VERIFICACIÓN_ADMIN"%TYPE,
P_ID CP.TRABAJADOR_ID_TRABAJADOR%TYPE,
P_MATRICULA CP.VEHICULO_MATRICULA%TYPE)
AS
BEGIN
      UPDATE CP
      SET
            FECHA = P_FECHA,
            KM_INICIO = P_KMI,
            KM_FINAL = P_KMF,
            GASTO_GASOIL = P_GASOIL,
            GASTO_AUTOPISTA = P_AUTO,
            GASTO_DIETAS = P_DIETAS,
            OTROS_GASTOS = P_OTROS,
            INCIDENCIAS_POSIBLES = P_INCI,
            EXCESO_HORAS = P_EH,
            CERRAR_LOGIS = P_CERRAR,
            "VERIFICACIÓN_ADMIN" = P_VERIFICA,
            TRABAJADOR_ID_TRABAJADOR = P_ID,
            VEHICULO_MATRICULA = P_MATRICULA

      where FECHA = P_FECHA AND TRABAJADOR_ID_TRABAJADOR = P_ID;

IF sql%notfound
THEN
INSERT INTO CP(FECHA, KM_INICIO, KM_FINAL, GASTO_GASOIL, GASTO_AUTOPISTA, GASTO_DIETAS, OTROS_GASTOS,
INCIDENCIAS_POSIBLES, EXCESO_HORAS, CERRAR_LOGIS, "VERIFICACIÓN_ADMIN", TRABAJADOR_ID_TRABAJADOR, VEHICULO_MATRICULA)
VALUES (P_FECHA, P_KMI, P_KMF, P_GASOIL, P_AUTO, P_DIETAS, P_OTROS, P_INCI, P_EH, P_CERRAR,
P_VERIFICA, P_ID, P_MATRICULA);
COMMIT;
END IF;
END;

create or replace PROCEDURE P_IN_EDIT_CT(
P_CT_ID CENTRO_TRABAJO.ID_CENTRO%TYPE,
P_CT_NOMBRE CENTRO_TRABAJO.NOMBRE%TYPE,
P_CT_CALLE CENTRO_TRABAJO.CALLE%TYPE,
P_CT_NUMERO CENTRO_TRABAJO."NÚMERO"%TYPE,
P_CT_CP CENTRO_TRABAJO."CÓDIGO_POSTAL"%TYPE,
P_CT_CIUDAD CENTRO_TRABAJO.CIUDAD%TYPE,
P_CT_PROVINCIA CENTRO_TRABAJO.PROVINCIA%TYPE,
P_CT_TELEFONO CENTRO_TRABAJO."TELÉFONO"%TYPE)
AS
BEGIN
      UPDATE CENTRO_TRABAJO
      SET
            NOMBRE=p_CT_NOMBRE,
            CALLE=p_CT_CALLE,
            NÚMERO=p_CT_NUMERO,
            CÓDIGO_POSTAL=P_CT_CP,
            CIUDAD = P_CT_CIUDAD,
            PROVINCIA = P_CT_PROVINCIA,
            TELÉFONO = P_CT_TELEFONO
      where ID_CENTRO=p_CT_ID;
IF sql%notfound
THEN
INSERT INTO CENTRO_TRABAJO(NOMBRE, CALLE, "NÚMERO", "CÓDIGO_POSTAL", CIUDAD, PROVINCIA, "TELÉFONO")
VALUES (P_CT_NOMBRE, P_CT_CALLE, P_CT_NUMERO, P_CT_CP, P_CT_CIUDAD, P_CT_PROVINCIA, P_CT_TELEFONO);
END IF;
COMMIT;
END;

create or replace PROCEDURE        P_IN_EDIT_GESTION_PARTE(
P_FECHA CP.FECHA%TYPE,
P_ID CP.TRABAJADOR_ID_TRABAJADOR%TYPE,
P_MATRICULA CP.VEHICULO_MATRICULA%TYPE,
P_KMINI CP.KM_INICIO%TYPE:=1,
P_KMFIN CP.KM_INICIO%TYPE:=1,
P_GASOIL CP.GASTO_GASOIL%TYPE,
P_AUTOPISTA CP.GASTO_AUTOPISTA%TYPE,
P_DIETAS CP.GASTO_DIETAS%TYPE,
P_OTROS CP.OTROS_GASTOS%TYPE,
P_INCI CP.INCIDENCIAS_POSIBLES%TYPE,
P_CRD CP.CERRAR_LOGIS%TYPE,
P_VRF CP."VERIFICACIÓN_ADMIN"%TYPE,
P_HE CP.EXCESO_HORAS%TYPE)
AS
BEGIN
      UPDATE CP
      SET
            FECHA = P_FECHA,
            TRABAJADOR_ID_TRABAJADOR = P_ID,
            VEHICULO_MATRICULA = P_MATRICULA,
            KM_FINAL = P_KMFIN,
            GASTO_GASOIL = P_GASOIL,
            GASTO_AUTOPISTA = P_AUTOPISTA,
            GASTO_DIETAS = P_DIETAS,
            OTROS_GASTOS = P_OTROS,
            INCIDENCIAS_POSIBLES = P_INCI,
            CERRAR_LOGIS = P_CRD,
            "VERIFICACIÓN_ADMIN" = P_VRF,
            EXCESO_HORAS = P_HE
      where FECHA = P_FECHA AND TRABAJADOR_ID_TRABAJADOR = P_ID;

IF sql%notfound
THEN
INSERT INTO CP(FECHA,TRABAJADOR_ID_TRABAJADOR, VEHICULO_MATRICULA, KM_INICIO, KM_FINAL, GASTO_GASOIL, GASTO_AUTOPISTA, GASTO_DIETAS, OTROS_GASTOS, INCIDENCIAS_POSIBLES, CERRAR_LOGIS, "VERIFICACIÓN_ADMIN", EXCESO_HORAS)
VALUES (P_FECHA, P_ID, P_MATRICULA, P_KMINI, P_KMFIN, P_GASOIL, P_AUTOPISTA, P_DIETAS, P_OTROS, P_INCI, P_CRD, P_VRF, P_HE);
COMMIT;
END IF;
END;

create or replace PROCEDURE  P_IN_EDIT_LINEA_PARTE(
P_HINI LP.HORA_INICIO%TYPE,
P_HFIN LP.HORA_FINAL%TYPE,
P_FECHA LP.CP_FECHA%TYPE,
P_ID LP.CP_TRABAJADOR_ID_TRABAJADOR%TYPE)
AS
BEGIN
      UPDATE LP
      SET
            HORA_INICIO = P_HINI,
            HORA_FINAL = P_HFIN,
            CP_FECHA = P_FECHA,
            CP_TRABAJADOR_ID_TRABAJADOR = P_ID

      where CP_FECHA = P_FECHA AND CP_TRABAJADOR_ID_TRABAJADOR = P_ID;

IF sql%notfound
THEN
INSERT INTO LP(HORA_INICIO, HORA_FINAL, CP_FECHA, CP_TRABAJADOR_ID_TRABAJADOR)
VALUES (P_HINI, P_HFIN, P_FECHA, P_ID);
COMMIT;
END IF;
END;

create or replace PROCEDURE  P_IN_EDIT_TRABAJADOR(
P_T_ID TRABAJADOR.ID_TRABAJADOR%TYPE,
P_T_DNI TRABAJADOR.DNI%TYPE,
P_T_NOMBRE TRABAJADOR.NOMBRE%TYPE,
P_T_APE1 TRABAJADOR.APELLIDO_1%TYPE,
P_T_APE2 TRABAJADOR.APELLIDO_2%TYPE,
P_T_CALLE TRABAJADOR.CALLE%TYPE,
P_T_PORTAL TRABAJADOR.PORTAL%TYPE,
P_T_PISO TRABAJADOR.PISO%TYPE,
P_T_MANO TRABAJADOR.MANO%TYPE,
P_T_TP TRABAJADOR.TELEFONO_PERSONAL%TYPE,
P_T_ME TRABAJADOR.MOVIL_EMPRESA%TYPE,
P_T_SALARIO TRABAJADOR.SALARIO%TYPE,
P_T_FN TRABAJADOR.FECHA_NACIMIENTO%TYPE,
P_T_CATE TRABAJADOR."CATEGORÍA"%TYPE,
P_T_CT TRABAJADOR.CENTRO_TRABAJO_ID_CENTRO%TYPE)
AS
BEGIN
      UPDATE TRABAJADOR
      SET
            DNI = P_T_DNI,
            NOMBRE = P_T_NOMBRE,
            APELLIDO_1 = P_T_APE1,
            APELLIDO_2 = P_T_APE2,
            CALLE = P_T_CALLE,
            PORTAL = P_T_PORTAL,
            PISO = P_T_PISO,
            MANO = P_T_MANO,
            TELEFONO_PERSONAL = P_T_TP,
            MOVIL_EMPRESA = P_T_ME,
            SALARIO = P_T_SALARIO,
            FECHA_NACIMIENTO = P_T_FN,
            CATEGORÍA = P_T_CATE,
            CENTRO_TRABAJO_ID_CENTRO = P_T_CT

      where ID_TRABAJADOR = P_T_ID;

IF sql%notfound
THEN
INSERT INTO TRABAJADOR(ID_TRABAJADOR, DNI, NOMBRE, APELLIDO_1, APELLIDO_2, CALLE, PORTAL, PISO,
MANO, TELEFONO_PERSONAL, MOVIL_EMPRESA, SALARIO, FECHA_NACIMIENTO, "CATEGORÍA", CENTRO_TRABAJO_ID_CENTRO)
VALUES (P_T_ID, P_T_DNI, P_T_NOMBRE, P_T_APE1, P_T_APE2, P_T_CALLE, P_T_PORTAL, P_T_PISO, P_T_MANO,
P_T_TP, P_T_ME, P_T_SALARIO, P_T_FN, P_T_CATE, P_T_CT);
COMMIT;
END IF;
END;

create or replace PROCEDURE  P_IN_EDIT_VEHICULO(
P_V_MATRICULA VEHICULO.MATRICULA%TYPE,
P_V_MARCA VEHICULO.MARCA%TYPE,
P_V_MODELO VEHICULO.MODELO%TYPE,
P_V_COLOR VEHICULO.COLOR%TYPE,
P_V_KMS VEHICULO.KM_TOTALES%TYPE)
AS
BEGIN
      UPDATE VEHICULO
      SET
            MATRICULA = P_V_MATRICULA,
            MARCA = P_V_MARCA,
            MODELO = P_V_MODELO,
            COLOR = P_V_COLOR,
            KM_TOTALES = P_V_KMS

      where MATRICULA = P_V_MATRICULA;

IF sql%notfound
THEN
INSERT INTO VEHICULO(MATRICULA, MARCA, MODELO, COLOR, KM_TOTALES)
VALUES (P_V_MATRICULA, P_V_MARCA, P_V_MODELO, P_V_COLOR, P_V_KMS);
COMMIT;
END IF;
END;

-- PROCEDIMIENTOS DE LISTADO
create or replace PROCEDURE P_LISTA_AVISO(CURSOR_AVISO OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_AVISO FOR
    SELECT * FROM AVISO_VISTA;
END;

create or replace PROCEDURE P_LISTA_CT(CONSULTA_CT OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CONSULTA_CT FOR
    SELECT * FROM CENTRO_TRABAJO;
END;

create or replace PROCEDURE P_LISTA_GESTION(CURSOR_GESTION OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_GESTION FOR
    SELECT * FROM CP_VISTA;
END;

create or replace PROCEDURE P_LISTA_TRABAJADOR(CURSOR_TRABAJADOR OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_TRABAJADOR FOR
    SELECT * FROM TRABAJADOR;
END;

create or replace PROCEDURE P_LISTA_VEHICULO(CURSOR_VEHICULO OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_VEHICULO FOR
    SELECT * FROM VEHICULO;
END;

-- PROCEDIMIENTOS DE BUSQUEDA

create or replace PROCEDURE P_SELECT_AVISO(P_NOMBRE AVISO_VISTA.NOMBRE%TYPE, CURSOR_AVISO OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_AVISO FOR
    SELECT * FROM AVISO_VISTA
    WHERE NOMBRE LIKE P_NOMBRE;
  COMMIT;
END;

create or replace PROCEDURE P_SELECT_CRD_VFD(P_C IN CP_VISTA.CERRAR_LOGIS%TYPE,
P_V IN CP_VISTA."VERIFICACIÓN_ADMIN"%TYPE, CURSOR_GESTION OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_GESTION FOR
    SELECT * FROM CP_VISTA
    WHERE CERRAR_LOGIS = P_C AND VERIFICACIÓN_ADMIN = P_V;
END;

create or replace PROCEDURE P_SELECT_CT(P_NOMBRE CENTRO_TRABAJO.NOMBRE%TYPE, CONSULTA_CT OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CONSULTA_CT FOR
    SELECT * FROM CENTRO_TRABAJO
    WHERE NOMBRE LIKE P_NOMBRE;
  COMMIT;
END;

create or replace PROCEDURE P_SELECT_GESTION(P_FECHA IN CP_VISTA.FECHA%TYPE, P_C IN CP_VISTA.CERRAR_LOGIS%TYPE,
P_V IN CP_VISTA."VERIFICACIÓN_ADMIN"%TYPE, CURSOR_GESTION OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_GESTION FOR
    SELECT * FROM CP_VISTA
    WHERE FECHA = P_FECHA AND CERRAR_LOGIS = P_C AND VERIFICACIÓN_ADMIN = P_V;
END;

create or replace PROCEDURE P_SELECT_TRABAJADOR(P_NOMBRE IN TRABAJADOR.NOMBRE%TYPE, CURSOR_TRABAJADOR OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_TRABAJADOR FOR
    SELECT * FROM TRABAJADOR
    WHERE NOMBRE LIKE P_NOMBRE;
END;

create or replace PROCEDURE P_SELECT_VEHICULO(P_MAT IN VEHICULO.MATRICULA%TYPE, CURSOR_VEHICULO OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN CURSOR_VEHICULO FOR
    SELECT * FROM VEHICULO
    WHERE MATRICULA LIKE P_MAT;
END;
